{"name":"ROSLab","tagline":"A High-level Programming Language for Robotic Applications","body":"### Why was ROSLab developed?\r\nIn recent years, we have witnessed an increase in the use of robots for different applications spanning from military to civilian operations. The robotics community has been very active in creating algorithms and theories to optimally navigate single and multiple agents in complex environments. While this growing of capabilities makes robotics more suitable and attractive for everyday applications, experiments become more and more complex and time-consuming. Currently, roboticists need to have a deep knowledge of programming languages such as C, C++, Java, and Python, to name few popular ones, that are often not intuitive and easy to understand and implement, especially for beginner users. To overcame this limitation, we propose a simplified high-level programming language based on blocks and links dragged on a workspace which generates the skeleton code for robotic applications involving different types of robots.\r\n\r\n![](http://www.seas.upenn.edu/~pgeb/images/ROSLab2_sized.png)\r\n\r\n### How does it work?\r\nIn order to develop such a high-level programming language that still can guarantee flexibility in terms of implementation, our approach takes advantage of the [Robot Operating System](http://www.ros.org). ROS is an open source meta-operating system that provides a message passing structure between different processes (or nodes) across a network. In our framework, we consider a hierarchical approach in which at the base there is ROS that allows inter-process communication between nodes in a robot and on the top we create a high-level language that interacts with ROS and thus with the real robot. The high-level language can be viewed as an extra layer added to simplify lower level code generation. The developed high-level programming language which we call ROSLab allows: (i) to easily program operations involving aerial and ground vehicles and (ii) to verify several properties about the generated code such as execution time and information flow.\r\n\r\n### Demonstrations\r\nSeveral demonstrations of ROSLab use can be found on Nicola Bezzo's [ROSLab](http://www.seas.upenn.edu/~nicbezzo/ROSLab.html) page.\r\n\r\n### Releases\r\nAll releases can be found on the project's [Releases](https://github.com/PRECISE/ROSLab/releases) page.\r\n\r\nROSLab version 2 (shown below) coming soon.\r\n\r\n![](http://www.seas.upenn.edu/~pgeb/images/ROSLab_v2.png)\r\n\r\n### Team\r\n[Nicola Bezzo](mailto:nicbezzo@cis.upenn.edu), [Junkil Park](mailto:junkil.park@cis.upenn.edu), [Andrew King](mailto:kingand@cis.upenn.edu), [Peter Gebhard](mailto:pgeb@cis.upenn.edu), [Radoslav Ivanov](mailto:rivanov@cis.upenn.edu), [Oleg Sokolsky](mailto:sokolsky@cis.upenn.edu), [Insup Lee](mailto:lee@cis.upenn.edu)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}